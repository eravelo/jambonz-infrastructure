AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: jambonzMini EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceTypeMonitoringServer:
    Description: "the EC2 instance type for the monitoring server"
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.18xlarge
      - c5n.metal
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AllowedSshCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address ssh access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    ConstraintDescription: must be a valid network CIDR
  AllowedHttpCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address http(s) access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    ConstraintDescription: must be a valid network CIDR
    Default: '0.0.0.0/0'
  AllowedSipCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address sip access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    ConstraintDescription: must be a valid network CIDR
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    Default: '0.0.0.0/0'
  AllowedRtpCidr:
    Description: Please set CIDR to x.x.x.x/32 to allow one specific IP address to send RTP traffic, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range.
    Type: String
    ConstraintDescription: must be a valid network CIDR
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    Default: '0.0.0.0/0'
  VpcCidr:
    Description: "The CIDR block for the whole VPC"
    Type: "String"
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}
    Default: '172.20.0.0/16'
  PublicSubnet1CIDR:
    Description: "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone"
    Type: "String"
    Default: '172.20.10.0/24'
  PublicSubnet2CIDR:
    Description: "Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone"
    Type: "String"
    Default: '172.20.11.0/24'
  MySQLUsername:
    Description: 'the database username'
    Type: String
    Default: 'admin'
  MySQLPassword:
    NoEcho: true
    Description: 'The database admin account password'
    Type: String
    Default: 'JambonzR0ck$'
  AuroraDBMinCapacity:
    Description: "min capacity for database"
    Type: Number
    Default: 1
  AuroraDBMaxCapacity:
    Description: "max capacity for database"
    Type: Number
    Default: 1
    AllowedValues:
      - 1
      - 2
      - 4
      - 8
  Cloudwatch:
    Description: Send jambonz logs to cloudwatch
    Type: String
    Default: true
    AllowedValues: [true, false]
  CloudwatchLogRetention:
    Description: "Number of days to retain cloudwatch logs"
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
  URLPortal:
    Type: String
    Description: "(Optional) A DNS name for the server (note: you must add a DNS A record in your DNS provider)"
    Default: ""
  Prefix:
    Description: "Name of VPC and other identifiers - lower case letters only"
    Type: "String"
    Default: "jb-mini"
  ElastiCacheNodeType:
    Type: String
    Default: 'cache.t3.micro'
  EnableTracing:
    Type: Number
    Description: enable opentelemetry application tracing?
    AllowedValues:
      - 0
      - 1
    Default: 1
  WebLoadBalancerLogRetention:
    Default: '7'
    Description: Number of days to retain Load Balancer logs in S3 (blank for unlimited)
    Type: String
  WebLoadBalancerIdleTimeout:
    Description: "Web ALB idle timeout value, in seconds"
    Type: Number
    Default: 60
  ServerCertificateArn:
    Description: "Web Server SSL certificate ARN"
    Type: String
    ConstraintDescription: must be a valid
  EncryptionSecret:
    Type: String
    Description: "Secret to use for encrypting JWT and other data"
    Default: "id7@Nta3Di-He.MUw6ef"

Conditions:
  ShouldEnableCloudWatch: !Equals
    - true
    - !Ref Cloudwatch
  DontCreateDNS: !Equals
    - !Ref URLPortal
    - ""
  CreateDNS: !Not
    - !Equals 
      - !Ref URLPortal
      - ""
  BlankLogRetention: !Equals
    - !Ref WebLoadBalancerLogRetention
    - ''

Mappings:
  AWSRegion2AMI:
    eu-west-3:
      MediumServerAmi: ami-0c42c0be4f8cd2bcf
      MonitoringServerAmi: ami-045b88ba6e8adda51
  RegionConfig:
    af-south-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: 098369216593
      Fargate: 'Yes'
    ap-east-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '754344448648'
      Fargate: 'Yes'
    ap-northeast-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '582318560864'
      Fargate: 'No'
    ap-northeast-2:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '600734575887'
      Fargate: 'Yes'
    ap-northeast-3:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '383597477331'
      Fargate: 'Yes'
    ap-south-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '718504428378'
      Fargate: 'Yes'
    ap-southeast-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '114774131450'
      Fargate: 'Yes'
    ap-southeast-2:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '783225319266'
      Fargate: 'Yes'
    ca-central-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '985666609251'
      Fargate: 'No'
    eu-central-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: 054676820928
      Fargate: 'Yes'
    eu-north-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '897822967062'
      Fargate: 'Yes'
    eu-south-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '635631232127'
      Fargate: 'Yes'
    eu-west-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '156460612806'
      Fargate: 'Yes'
    eu-west-2:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '652711504416'
      Fargate: 'Yes'
    eu-west-3:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: 009996457667
      Fargate: 'Yes'
    me-south-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '076674570225'
      Fargate: 'Yes'
    sa-east-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '507241528517'
      Fargate: 'Yes'
    us-east-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '127311923021'
      Fargate: 'Yes'
    us-east-2:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: 033677994240
      Fargate: 'Yes'
    us-west-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'No'
      ELBAccountId: 027434742980
      Fargate: 'No'
    us-west-2:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '797873946194'
      Fargate: 'Yes'
    us-gov-east-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: '190560391635'
      Fargate: 'Yes'
    us-gov-west-1:
      EFS: 'Yes'
      ThirdAvailabilityZone: 'Yes'
      ELBAccountId: 048591011584
      Fargate: 'Yes'

Resources:
  ServerIamRole:
    Type: AWS::IAM::Role
    Condition: ShouldEnableCloudWatch
    Properties: 
      Description: jambonz mini IAM role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root 
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - 'cloudwatch:PutMetricData'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeTags'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AutoScalingReadOnlyAccess

###########################################
#
#      VPC Resources
#
###########################################
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref "VpcCidr"
      Tags:
      - Key: "Name"
        Value: !Sub "${Prefix}-VPC"

  # Create Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: "Name"
        Value: !Sub "${Prefix}-IGW"

  # Attach Internet Gateway to VPC
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  # Create Public Subnet
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !Ref "PublicSubnet1CIDR"
      AvailabilityZone: !Select [ '0', !GetAZs ]
      MapPublicIpOnLaunch: "True"
      Tags:
      - Key: "Name"
        Value: !Sub "${Prefix}-${PublicSubnet1CIDR}-PublicSubnet1"

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !Ref "PublicSubnet2CIDR"
      AvailabilityZone: !Select [ '1', !GetAZs ]
      MapPublicIpOnLaunch: "True"
      Tags:
      - Key: "Name"
        Value: !Sub "${Prefix}-${PublicSubnet2CIDR}-PublicSubnet2"

  # Create Public Route Table 1
  PublicRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: "Name"
        Value: !Sub "${Prefix}-PublicRoute1"

  # Create Public Route Table 2
  PublicRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: "Name"
        Value: !Sub "${Prefix}-PublicRoute2"

  # Route-out Public Route Table to Internet Gateway (Internet connection)
  PublicRouteIGW1:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId: !Ref "PublicRouteTable1"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  PublicRouteIGW2:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId: !Ref "PublicRouteTable2"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  # Associate Public Route Table with Public Subnet1 & Subnet2
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      RouteTableId: !Ref "PublicRouteTable1"

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      RouteTableId: !Ref "PublicRouteTable2"

###########################################
#      Create a couple of EIPs for SBC SIP Servers, and tag them as such
#      Note: devops can create more EIPs later, the Environment tag
#      is what caused them to get associated when sip servers scale.
#      The idea is simply to have a pre-allocated set of 2 EIPs
#      for sip signaling so these can be whitelisted with carriers
###########################################
  SbcSipServerEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        -
          Key: Environment
          Value: !Sub '${Prefix}-sbc-sip'
        -
          Key: Name
          Value: !Sub '${Prefix}-sbc-sip-1'

  SbcSipServerEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        -
          Key: Environment
          Value: !Sub '${Prefix}-sbc-sip'
        -
          Key: Name
          Value: !Sub '${Prefix}-sbc-sip-2'

###########################################
#
#      Monitoring Instance
#
###########################################

  MonitoringServerEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !FindInMap [ "AWSRegion2AMI", !Ref AWS::Region,  "MonitoringServerAmi"]
      InstanceType: !Ref InstanceTypeMonitoringServer
      SecurityGroupIds:
        - Ref: sshSecurityGroup
        - Ref: MonitoringSecurityGroup
      KeyName: !Ref KeyName
      Monitoring: true
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              # restart heplify-server
              sudo systemctl restart heplify-server
              # configure telegraph to send to the monitoring server
              sudo sed -i -e "s/influxdb:8086/127.0.0.1:8086/g"  /etc/telegraf/telegraf.conf
              sudo systemctl restart telegraf
            - EnableTracing: !Ref EnableTracing
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-monitoring-server'

###########################################
#
#      Server Instance
#
###########################################

  ServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Condition: ShouldEnableCloudWatch
    Properties:
      InstanceProfileName:  !Sub '${Prefix}-server-ec2-role'
      Path: /
      Roles:
        - !Ref ServerIamRole

  ServerConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [ "AWSRegion2AMI", !Ref AWS::Region,  "MediumServerAmi"]
      SecurityGroups:
        - Ref: jambonzSecurityGroup
        - Ref: sshSecurityGroup
      IamInstanceProfile: !Ref ServerInstanceProfile
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              #!/bin/bash -xe

              #install rtpengine kernel module 
              #echo "installing rtpengine kernel module"
              #modprobe xt_RTPENGINE
              #iptables -I INPUT -p udp -j RTPENGINE --id 42

              # get instance metadata
              PRIVATE_IPV4="$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)" 
              PRE_PUBLIC_IP="$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
              INSTANCE_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" 
              AWS_REGION_NAME="$(curl -s http://169.254.169.254/latest/meta-data/placement/region)" 

              echo "before retrieving EIP for SIP server, public IP is $PRE_PUBLIC_IP"

              /usr/local/bin/auto-assign-elastic-ip.sh
              sleep 15

              PUBLIC_IPV4=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`
              echo "after retrieving EIP for SIP server, public IP is $PUBLIC_IPV4"

              echo "starting drachtio with correct public IP"
              sudo systemctl enable drachtio
              sudo systemctl restart drachtio
              sudo systemctl status drachtio.service
              sudo systemctl enable drachtio-5070
              sudo systemctl restart drachtio-5070

              echo "enabling HEP and restarting drachtio server"
              sudo sed -i -e "s/--address 0.0.0.0 --port 9022/--address 0.0.0.0 --port 9022 --homer ${MONITORING_SERVER_IP}:9060 --homer-id 10/g"  /etc/systemd/system/drachtio.service
              sudo systemctl daemon-reload
              sudo systemctl restart drachtio

              # change the database password to the instance id
              # Do not do this when using a RDS DB cluster
              #NEW_DB_PASSWD="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)" 
              #echo "alter user 'admin'@'%' identified by '$NEW_DB_PASSWD'" | mysql -h localhost -u admin -D jambones -pJambonzR0ck$ 
              #sudo sed -i -e "s/\(.*\)JAMBONES_MYSQL_PASSWORD.*/\1JAMBONES_MYSQL_PASSWORD: '$NEW_DB_PASSWD',/g" /home/admin/apps/ecosystem.config.js 
              
              # replace ip addresses in the ecosystem.config.js file
              sudo sed -i -e "s/\(.*\)PRIVATE_IP\(.*\)/\1$PRIVATE_IPV4\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)AWS_REGION_NAME\(.*\)/\1$AWS_REGION_NAME\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)--JAMBONES_API_BASE_URL--\(.*\)/\1http:\/\/$PUBLIC_IPV4\/v1\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)JAEGER_HOST_GOES_HERE\(.*\)/\1${MONITORING_SERVER_IP}\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)HOMER_HOST_GOES_HERE\(.*\)/\1${MONITORING_SERVER_IP}\2/g" /home/admin/apps/ecosystem.config.js 
              sudo sed -i -e "s/\(.*\)JAMBONES_TIME_SERIES_HOST_GOES_HERE\(.*\)/\1${MONITORING_SERVER_IP}\2/g" /home/admin/apps/ecosystem.config.js 
              
              # replace JWT_SECRET
              uuid="${JWT_SECRET}"
              sudo sed -i -e "s/\(.*\)JWT-SECRET-GOES_HERE\(.*\)/\1$uuid\2/g" /home/admin/apps/ecosystem.config.js 

              # replace database settings in the ecosystem.config.js file
              sudo sed -i -e "s/\(.*\)JAMBONES_MYSQL_PASSWORD.*/\1JAMBONES_MYSQL_PASSWORD: '${JAMBONES_MYSQL_PASSWORD}',/g" /home/admin/apps/ecosystem.config.js
              sudo sed -i -e "s/\(.*\)JAMBONES_MYSQL_HOST.*/\1JAMBONES_MYSQL_HOST: '${JAMBONES_MYSQL_HOST}',/g" /home/admin/apps/ecosystem.config.js
              sudo sed -i -e "s/\(.*\)JAMBONES_MYSQL_USER.*/\1JAMBONES_MYSQL_USER: '${JAMBONES_MYSQL_USER}',/g" /home/admin/apps/ecosystem.config.js

              # reset the database
              # Do not do this when using a RDS DB cluster
              #JAMBONES_ADMIN_INITIAL_PASSWORD=$INSTANCE_ID JAMBONES_MYSQL_USER=admin JAMBONES_MYSQL_PASSWORD=$NEW_DB_PASSWD JAMBONES_MYSQL_DATABASE=jambones JAMBONES_MYSQL_HOST=localhost /home/admin/apps/jambonz-api-server/db/reset_admin_password.js

              # seed database
              # Do this when using a RDS DB cluster
              echo "Seeding and migrate database"
              cd /home/admin/apps/jambonz-api-server
              JAMBONES_MYSQL_HOST=${JAMBONES_MYSQL_HOST} JAMBONES_MYSQL_USER=${JAMBONES_MYSQL_USER} JAMBONES_MYSQL_PASSWORD=${JAMBONES_MYSQL_PASSWORD} JAMBONES_MYSQL_DATABASE=jambones npm run upgrade-db

              # replace Redis settings in the ecosystem.config.js file
              sudo sed -i -e "s/\(.*\)JAMBONES_REDIS_HOST.*/\1JAMBONES_REDIS_HOST: '${JAMBONES_REDIS_HOST}',/g" /home/admin/apps/ecosystem.config.js

              # configure webapp
              echo "Configuring webapp"
              if [[ -z "${URLPortal}" ]]; then
                # portals will be accessed by IP address of server
                echo "VITE_API_BASE_URL=http://$PUBLIC_IPV4/api/v1" > /home/admin/apps/jambonz-webapp/.env 
                API_BASE_URL=http://$PUBLIC_IPV4/api/v1 TAG="<script>window.JAMBONZ = { API_BASE_URL: '$API_BASE_URL'};</script>"
                sed -i -e "\@</head>@i\ $TAG" /home/admin/apps/jambonz-webapp/dist/index.html
              else
                # portals will be accessed by DNS name
                echo "VITE_API_BASE_URL=https://${URLPortal}/api/v1" > /home/admin/apps/jambonz-webapp/.env
                API_BASE_URL=https://${URLPortal}/api/v1 TAG="<script>window.JAMBONZ = { API_BASE_URL: '$API_BASE_URL'};</script>"
                sed -i -e "\@</head>@i\ $TAG" /home/admin/apps/jambonz-webapp/dist/index.html

                # add row to system information table
                mysql -h ${JAMBONES_MYSQL_HOST} -u ${JAMBONES_MYSQL_USER} -D jambones -p${JAMBONES_MYSQL_PASSWORD} -e $'insert into system_information (domain_name, sip_domain_name, monitoring_domain_name) values ('\'''"${URLPortal}"''\'', '\''sip-'"${URLPortal}"''\'', '\''grafana-'"${URLPortal}"''\'')'
              
                sudo cat << EOF > /etc/nginx/sites-available/default 
                server {
                    listen 80;
                    server_name ${URLPortal};
                    location /api/ {
                        rewrite ^/api/(.*)$ /\$1 break;
                        proxy_pass http://localhost:3002;
                        proxy_set_header Host \$host;
                    }
                    location / {
                        proxy_pass http://localhost:3001;
                        proxy_set_header Host \$host;
                    }
                }
                server {
                  listen 80;
                  server_name api-${URLPortal};
                  location / {
                    proxy_pass http://localhost:3002; 
                    proxy_set_header Host \$host;
                  }
                }
                server {
                  listen 80;
                  server_name grafana-${URLPortal};
                  location / {
                    proxy_pass http://${MONITORING_SERVER_IP}:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                  }
                }
                server {
                  listen 80;
                  server_name homer-${URLPortal};
                  location / {
                    proxy_pass http://${MONITORING_SERVER_IP}:9080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                  }
                }
              EOF
              
                sudo systemctl restart nginx
              fi

              # Disable fail2ban to prevent blocking the ELB's healthcheck
              echo "disabling fail2ban"
              sudo systemctl stop fail2ban
              sudo systemctl disable fail2ban

              # enable cloudwatch
              if [[ "${Cloudwatch}" == "true" ]]; then
                echo "Enabling Cloudwatch for jambonz logs"
                sudo sed -i -e "s/retention_in_days\": 3/retention_in_days\": ${CloudwatchLogRetention}/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json 
                sudo sed -i -e "s/log_group_name\": \"jambonz-feature_server\"/log_group_name\": \"${Prefix}-jambonz-feature_server\"/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json
                sudo sed -i -e "s/log_group_name\": \"jambonz-sbc-sip-inbound\"/log_group_name\": \"${Prefix}-jambonz-sbc-sip-inbound\"/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json
                sudo sed -i -e "s/log_group_name\": \"jambonz-sbc-sip\"/log_group_name\": \"${Prefix}-jambonz-sbc-sip\"/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json
                sudo sed -i -e "s/log_group_name\": \"jambonz-sbc-sip-sidecar\"/log_group_name\": \"${Prefix}-jambonz-sbc-sip-sidecar\"/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json
                sudo sed -i -e "s/log_group_name\": \"jambonz-api-server\"/log_group_name\": \"${Prefix}-jambonz-api-server\"/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json
                sudo sed -i -e "s/log_group_name\": \"\/var\/log\/syslog\"/log_group_name\": \"${Prefix}-jambonz-syslog\"/g" /opt/aws/amazon-cloudwatch-agent/bin/config.json
                sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
              else
                echo "Cloudwatch is not enabled for jambonz logs"
                sudo sed -i -e "s/combine_logs: true/combine_logs: false/g" /home/admin/apps/ecosystem.config.js 
              fi
              sudo -u admin bash -c "pm2 restart /home/admin/apps/ecosystem.config.js" 
              sudo -u admin bash -c "pm2 save"
              sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u admin --hp /home/admin

              # configure telegraph to send to the monitoring server
              sudo sed -i -e "s/influxdb:8086/${MONITORING_SERVER_IP}:8086/g"  /etc/telegraf/telegraf.conf
              sudo systemctl restart telegraf

              # get an apiban key
              APIBANKEY=$(curl -X POST -u jambonz:1a074994242182a9e0b67eae93978826 -d "{\"client\": \"$INSTANCE_ID\"}" -s https://apiban.org/sponsor/newkey | jq -r '.ApiKey')
              sudo sed -i -e "s/API-KEY-HERE/$APIBANKEY/g" /usr/local/bin/apiban/config.json
              sudo /usr/local/bin/apiban/apiban-iptables-client FULL
              
            - URLPortal: !Ref URLPortal
              Cloudwatch: !Ref Cloudwatch
              Prefix: !Ref Prefix
              CloudwatchLogRetention: !Ref CloudwatchLogRetention
              JAMBONES_MYSQL_HOST: !GetAtt DatabaseCluster.Endpoint.Address
              JAMBONES_MYSQL_USER: !Ref MySQLUsername
              JAMBONES_MYSQL_PASSWORD: !Ref MySQLPassword
              JAMBONES_REDIS_HOST: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
              MONITORING_SERVER_IP:  !GetAtt MonitoringServerEC2.PrivateIp
              JWT_SECRET: !Ref EncryptionSecret
    DependsOn:
      - DatabaseCluster
      - ElastiCacheCluster

  ServerPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: spread

  ServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${Prefix}-server-autoscaling-group'
      LaunchConfigurationName: !Ref ServerConfig
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref ServerTargetGroup
      DesiredCapacity: 1
      TerminationPolicies:
      - OldestInstance
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-server'
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value: !Sub '${Prefix}-sbc-sip'
          PropagateAtLaunch: 'true'

###########################################
#
#      Lad Balancer
#
###########################################
  ServerLoadBalancer:
    DependsOn:
      - ServerLoadBalancerLogsBucketPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: 'access_logs.s3.enabled'
          Value: 'true'
        - Key: 'access_logs.s3.bucket'
          Value: !Ref 'ServerLoadBalancerLogsBucket'
        - Key: 'access_logs.s3.prefix'
          Value:  !Sub 'logs/${AWS::StackName}'
        - Key: 'idle_timeout.timeout_seconds'
          Value: !Ref WebLoadBalancerIdleTimeout
      Name: !Sub '${Prefix}-server-alb'
      Scheme: internet-facing
      SecurityGroups:
        - Ref: jambonzSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-server-ALB'

  ServerLoadBalancerLogsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration: !If
        - BlankLogRetention
        - !Ref 'AWS::NoValue'
        - Rules:
            - ExpirationInDays: !Ref WebLoadBalancerLogRetention
              Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-server-ALB-Log'

  ServerLoadBalancerLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ServerLoadBalancerLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ELB log delivery service
            Effect: Allow
            Principal:
              AWS: !FindInMap
                - RegionConfig
                - !Ref 'AWS::Region'
                - ELBAccountId
            Action: 's3:PutObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${ServerLoadBalancerLogsBucket}/*'

  ServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      Port: 80
      Protocol: 'HTTP'
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: 'instance'
      Matcher:
        HttpCode: '200'
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      Name: !Sub '${Prefix}-server-tg'
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: 'false'
        - Key: 'deregistration_delay.timeout_seconds'
          Value: '60'
        - Key: 'stickiness.type'
          Value: 'lb_cookie'
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: '86400'
        - Key: 'slow_start.duration_seconds'
          Value: '60'
        - Key: 'load_balancing.algorithm.type'
          Value: 'round_robin'
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-server-TG'

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ServerLoadBalancer
      Port: 443
      Protocol: 'HTTPS'
      SslPolicy: 'ELBSecurityPolicy-2016-08'
      Certificates:
        - CertificateArn: !Ref ServerCertificateArn

      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref ServerTargetGroup
          Type: 'forward'

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ServerLoadBalancer
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Order: 1
          RedirectConfig:
              Protocol: 'HTTPS'
              Port: '443'
              Host: '#{host}'
              Path: '/#{path}'
              Query: '#{query}'
              StatusCode: 'HTTP_301'
          Type: 'redirect'

###########################################

  jambonzSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub '${Prefix}-sg'
      GroupDescription: 'Allow sip, rtp, http and https access'
      SecurityGroupIngress:
        - Description: sip over udp
          IpProtocol: udp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref AllowedSipCidr
        - Description: sip over tcp
          IpProtocol: tcp
          FromPort: 5060
          ToPort: 5060
          CidrIp: !Ref AllowedSipCidr
        - Description: sip over tls
          IpProtocol: tcp
          FromPort: 5061
          ToPort: 5061
          CidrIp: !Ref AllowedSipCidr
        - Description: sip over wss
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref AllowedSipCidr
        - Description: rtp
          IpProtocol: udp
          FromPort: 40000
          ToPort: 60000
          CidrIp: !Ref AllowedRtpCidr
        - Description: http
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedHttpCidr
        - Description: https
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedHttpCidr
        - Description: homer
          IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: !Ref AllowedHttpCidr
        - Description: jaeger
          IpProtocol: tcp
          FromPort: 16686
          ToPort: 16686
          CidrIp: !Ref AllowedHttpCidr
        - Description: grafana
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref AllowedHttpCidr
        - Description: smpp
          IpProtocol: tcp
          FromPort: 3020
          ToPort: 3020
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-jambonz-medium-sg'
    DependsOn:
      - PublicRouteIGW1
      - PublicRouteIGW2

  sshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub '${Prefix}-ssh-sg'
      GroupDescription: 'Allow ssh access'
      SecurityGroupIngress:
        - Description: ssh
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSshCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-ssh-sg'
    DependsOn:
      - PublicRouteIGW1
      - PublicRouteIGW2

  MonitoringSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Prefix}-monitoring-sg'
      GroupDescription: !Sub 'Security group for ${Prefix} Monitoring'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref AllowedHttpCidr
          Description: Allow grafana access
        - IpProtocol: tcp
          FromPort: 8086
          ToPort: 8086
          CidrIp:  !Ref VpcCidr
          Description: Allow influxdb access from VPC
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          CidrIp:  !Ref VpcCidr
          Description: Allow influxdb backup access from VPC
        - IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: !Ref VpcCidr
          Description: Allow access to homer webapp
        - IpProtocol: udp
          FromPort: 9060
          ToPort: 9060
          CidrIp: !Ref VpcCidr
          Description: Allow access to homer HEP
        - IpProtocol: tcp
          FromPort: 1880
          ToPort: 1880
          CidrIp: !Ref AllowedHttpCidr
          Description: Allow access to Node-RED
        - IpProtocol: tcp
          FromPort: 16686
          ToPort: 16686
          CidrIp: !Ref VpcCidr
          Description: Allow access to Jaeger
        - IpProtocol: udp
          FromPort: 6831
          ToPort: 6831
          CidrIp:  !Ref VpcCidr
          Description: Jaeger collector - compact
        - IpProtocol: udp
          FromPort: 6832
          ToPort: 6832
          CidrIp:  !Ref VpcCidr
          Description: Jaeger collector (udp)
        - IpProtocol: tcp
          FromPort: 14268
          ToPort: 14268
          CidrIp:  !Ref VpcCidr
          Description: Jaeger collector (http)
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-monitoring-sg'
    DependsOn:
      - PublicRouteIGW1
      - PublicRouteIGW2

###########################################
#
#      Aurora RDS Database
#
###########################################
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${Prefix}-aurora-mysql-subnetgroup'
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  MySQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Prefix}-mysql-sg'
      GroupDescription: !Sub 'Security group for ${Prefix} MySQL'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp:  !Ref VpcCidr
          Description: Allow traffic from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-mysql-sg'

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${Prefix}-aurora-mysql-cluster'
      Engine: aurora-mysql
      EngineVersion: '5.7'
      EngineMode: 'serverless'
      MasterUsername: !Ref MySQLUsername
      MasterUserPassword: !Ref MySQLPassword
      DatabaseName: 'jambones'
      BackupRetentionPeriod: 5
      PreferredBackupWindow: "07:00-09:00"
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref MySQLSecurityGroup
      ScalingConfiguration:
        AutoPause: false
        MaxCapacity: !Ref AuroraDBMaxCapacity
        MinCapacity: !Ref AuroraDBMinCapacity

###########################################
#
#      ElastiCache Redis
#
###########################################
  ElastiCacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      CacheSubnetGroupName: !Sub '${Prefix}-cache-subnetgroup'
      Description: !Sub 'Subnet group for ${Prefix} Redis'
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Prefix}-redis-sg'
      GroupDescription: !Sub 'Security group for ${Prefix} Redis'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp:  !Ref VpcCidr
          Description: Allow traffic from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
       - Key: Name
         Value: !Sub '${Prefix}-redis-sg'

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      EngineVersion: "5.0.6"
      CacheNodeType: !Ref ElastiCacheNodeType
      ClusterName : !Sub '${Prefix}-redis'
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      CacheParameterGroupName: 'default.redis5.0'
      VpcSecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId
      Port: 6379
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-redis'

###########################################

Outputs:
  WebPortalURL:
    Description: jambonz portal URL, log in with admin/admin and change password
    Value: !Join [ "", [ "https://", !Ref "URLPortal" ] ]
    Export:
      Name: !Sub '${Prefix}-webserver-url'

  GrafanaURL:
    Value: !Join 
      - ''
      - - 'https://grafana-'
        - !Ref URLPortal
    Description: URL for the grafana portal
    Condition: CreateDNS

  HomerURL:
    Value: !Join 
      - ''
      - - 'https://homer-'
        - !Ref URLPortal
    Description: URL for the homer portal
    Condition: CreateDNS

  WebLoadBalancerDnsURL:
    Description: DNS Name of the Web Load Balancer
    Value: !Join [ "", [ "", { "Fn::GetAtt" : [ "ServerLoadBalancer", "DNSName" ]}] ]

  User:
    Value: admin
    Description: Login username for the jambonz portal

  PublicSubnet1:
    Description: "A reference to the public subnet in the 1st Availability Zone"
    Value: !Ref "PublicSubnet1"
    Export:
      Name: !Sub "${Prefix}-PublicSubnet1"

  PublicSubnet2:
    Description: "A reference to the public subnet in the 2nd Availability Zone"
    Value: !Ref "PublicSubnet2"
    Export:
      Name: !Sub "${Prefix}-PublicSubnet2"
